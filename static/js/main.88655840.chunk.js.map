{"version":3,"sources":["getWeb3.js","App.js","serviceWorker.js","index.js"],"names":["getWeb3","Promise","resolve","reject","window","addEventListener","a","ethereum","web3","Web3","enable","console","log","provider","providers","HttpProvider","App","state","storageValue","accounts","contract","owner","componentDidMount","eth","handleRevert","getAccounts","net","getId","networkId","deployedNetwork","Voting","networks","instance","Contract","abi","address","setState","runRestart","affectOwner","contractOwner","alert","error","on","location","href","addVoter","value","methods","send","from","startProposalsRegistering","addProposal","document","getElementById","endProposalsRegistering","startVotingSession","setVote","endVotingSession","tallyVotes","getWinner","call","text","createTextNode","newP","createElement","appendChild","getOwner","this","result","String","toLowerCase","id","Card","Header","Body","DropdownButton","title","Dropdown","Item","as","Button","onClick","Form","Group","controlId","Label","Control","type","ref","input","Component","Boolean","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.88655840.chunk.js","sourcesContent":["import Web3 from \"web3\";\n\nconst getWeb3 = () =>\n  new Promise((resolve, reject) => {\n    // Wait for loading completion to avoid race conditions with web3 injection timing.\n    window.addEventListener(\"load\", async () => {\n      // Modern dapp browsers...\n      if (window.ethereum) {\n        const web3 = new Web3(window.ethereum);\n        try {\n          // Request account access if needed\n          await window.ethereum.enable();\n          // Accounts now exposed\n          resolve(web3);\n        } catch (error) {\n          reject(error);\n        }\n      }\n      // Legacy dapp browsers...\n      else if (window.web3) {\n        // Use Mist/MetaMask's provider.\n        const web3 = window.web3;\n        console.log(\"Injected web3 detected.\");\n        resolve(web3);\n      }\n      // Fallback to localhost; use dev console port by default...\n      else {\n        const provider = new Web3.providers.HttpProvider(\n          \"http://127.0.0.1:8545\"\n        );\n        const web3 = new Web3(provider);\n        console.log(\"No web3 instance injected, using Local web3.\");\n        resolve(web3);\n      }\n    });\n  });\n\nexport default getWeb3;","import React, { Component } from \"react\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { Button, Form, Card, DropdownButton, Dropdown} from \"react-bootstrap\";\nimport Voting from \"./contracts/Voting.json\";\nimport getWeb3 from \"./getWeb3\";\nimport \"./App.css\";\n\nclass App extends Component {\n  state = {\n    storageValue: 0,\n    web3: null,\n    accounts: null,\n    contract: null,\n    owner: null,\n  };\n\n  //Base\n  componentDidMount = async () => {\n    try {\n      const web3 = await getWeb3();\n      web3.eth.handleRevert = true;\n      \n      const accounts = await web3.eth.getAccounts();\n      const networkId = await web3.eth.net.getId();\n      \n      const deployedNetwork = Voting.networks[networkId];\n      const instance = new web3.eth.Contract(\n        Voting.abi,\n        deployedNetwork && deployedNetwork.address\n      );\n      \n      this.setState({ web3, accounts, contract: instance }, this.runRestart);\n      const contractOwner = await this.affectOwner();\n      this.setState({ owner: contractOwner });\n    } catch (error) {\n      alert(\n        `Failed to load web3, accounts, or contract. Check console for details.`\n      );\n      console.error(error);\n    }\n  };\n\n  runRestart = async () => {\n    window.ethereum.on(\"accountsChanged\", function (accounts) {\n      window.location.href = \"http://localhost:3000\";\n    });\n  };\n\n  //Interagir avec le smart contract\n  addVoter = async () => {\n    const { accounts, contract } = this.state;\n    const address = this.address.value;\n    try {\n      await contract.methods.addVoter(address).send({ from: accounts[0] });\n    } catch (e) {\n      console.log(\"Erreur\");\n    }\n  };\n\n  startProposalsRegistering = async () => {\n    const { accounts, contract } = this.state;\n    try {\n      await contract.methods\n        .startProposalsRegistering()\n        .send({ from: accounts[0] });\n    } catch (e) {\n      console.log(e, \"Erreur\");\n    }\n  };\n\n  addProposal = async () => {\n    const { accounts, contract } = this.state;\n    try {\n      await contract.methods\n        .addProposal(document.getElementById(\"_desc\").value)\n        .send({ from: accounts[0] });\n    } catch (e) {\n      console.log(e, \"Erreur\");\n    }\n  };\n\n  endProposalsRegistering = async () => {\n    const { accounts, contract } = this.state;\n    try {\n      await contract.methods\n        .endProposalsRegistering()\n        .send({ from: accounts[0] });\n    } catch (e) {\n      console.log(e, \"Erreur\");\n    }\n  };\n\n  startVotingSession = async () => {\n    const { accounts, contract } = this.state;\n    try {\n      await contract.methods\n        .startVotingSession()\n        .send({ from: accounts[0] });\n    } catch (e) {\n      console.log(e, \"Erreur\");\n    }\n  };\n\n  setVote = async () => {\n    const { accounts, contract } = this.state;\n    try {\n      await contract.methods\n        .setVote(document.getElementById(\"_id\").value)\n        .send({ from: accounts[0] });\n    } catch (e) {\n      console.log(e, \"Erreur\");\n    }\n  };\n\n  endVotingSession = async () => {\n    const { accounts, contract } = this.state;\n    try {\n      await contract.methods.endVotingSession().send({ from: accounts[0] });\n    } catch (e) {\n      console.log(e, \"Erreur\");\n    }\n  };\n\n  tallyVotes = async () => {\n    const { accounts, contract } = this.state;\n    try {\n      await contract.methods.tallyVotes().send({ from: accounts[0] });\n    } catch (e) {\n      console.log(e, \"Erreur\");\n    }\n  };\n\n  getWinner = async () => {\n    const { accounts, contract } = this.state;\n    try {\n      const text = document.createTextNode(\n        \"Proposition Gagnante : \" +\n          (await contract.methods.getWinner().call({ from: accounts[0] }))\n      );\n      const newP = document.createElement(\"p\");\n      newP.appendChild(text);\n      document.getElementById(\"winnerInfo\").appendChild(newP);\n    } catch (e) {\n      console.log(e, \"Erreur\");\n    }\n  };\n\n  //Owner\n  getOwner = function () {\n    const { contract } = this.state;\n    return new Promise(function (resolve) {\n      resolve(contract.methods.owner().call());\n    });\n  };\n\n  affectOwner = async () => {\n    var result = await this.getOwner();\n    return result;\n  };\n\n\n  render() {\n    if (!this.state.web3) {\n      return <h1>Wallet not found</h1>;\n    }\n\n    if (\n      String(this.state.owner).toLowerCase() ===\n      String(this.state.accounts[0]).toLowerCase()\n    ) {\n      return (\n        <div>\n          <h1>Voting page</h1>\n            <p id=\"userAddress\"> Account : {this.state.accounts[0]}\n          </p>\n          \n        <Card>\n          <Card.Header>\n            Workflows\n          </Card.Header>\n          <Card.Body>\n            <DropdownButton id=\"dropdown-item-button\" title=\"status\">\n              <Dropdown.Item as=\"button\">\n                <Button onClick={this.startProposalsRegistering}>\n                  ProposalsRegistrationStarted\n                </Button>\n              </Dropdown.Item>\n              <Dropdown.Item as=\"button\">\n               <Button onClick={this.endProposalsRegistering}>\n                  ProposalsRegistrationEnded\n                </Button>\n              </Dropdown.Item>\n              <Dropdown.Item as=\"button\">\n                <Button onClick={this.startVotingSession}>\n                  startVotingSession\n                </Button>\n              </Dropdown.Item>\n              <Dropdown.Item as=\"button\">\n                <Button onClick={this.endVotingSession}>\n                  endVotingSession\n                </Button>\n              </Dropdown.Item>\n              <Dropdown.Item as=\"button\">\n                <Button onClick={this.tallyVotes}>\n                  tallyVotes\n                </Button>\n              </Dropdown.Item>\n            </DropdownButton>\n          </Card.Body>\n        </Card>\n\n        <br></br>\n\n        <Card>\n          <Card.Header>\n            Add a voter to the Alyra voting system \n          </Card.Header>\n          <Card.Body>\n            <Form.Group controlId=\"formAddress\">\n              <Form.Label>\n                Voter adress :\n              </Form.Label>\n                <Form.Control\n                  type=\"text\"\n                  id=\"address\"\n                  ref={(input) => {this.address = input;}}\n                />\n              </Form.Group>\n              <Button onClick={this.addVoter}>\n                Add\n              </Button>\n            </Card.Body>\n           </Card>\n        \n        <br></br>\n\n        <Card>\n          <Card.Header>\n            Add a proposal\n          </Card.Header>\n          <Card.Body>\n            <Form.Group controlId=\"formDescription\">\n              <Form.Label>\n                Proposal description :\n              </Form.Label>\n              <Form.Control \n                type=\"text\"\n                id=\"_desc\"\n              />\n            </Form.Group>\n            <Button onClick={this.addProposal}>\n              Add\n            </Button>\n          </Card.Body>\n        </Card>\n          \n        <br></br>\n\n        <Card>\n          <Card.Header>\n            Vote\n          </Card.Header>\n          <Card.Body>\n            <Form.Group controlId=\"formId\">\n              <Form.Label>\n                Proposal ID :\n              </Form.Label>\n              <Form.Control\n                type=\"text\"\n                id=\"_id\"\n              />\n            </Form.Group>\n            <Button onClick={this.setVote}>\n              Add\n            </Button>\n          </Card.Body>\n        </Card>\n        \n        <br></br>\n\n        <Card>\n          <Card.Header>\n            Result\n          </Card.Header>\n          <Card.Body id=\"winnerInfo\">\n            <Button onClick={this.getWinner}>\n              Get Winner\n            </Button>\n          </Card.Body>\n        </Card>\n\n        <br></br>\n      \n        </div>\n      );\n    }\n   \n    if (\n      String(this.state.owner).toLowerCase() !==\n      String(this.state.accounts[0]).toLowerCase()\n    ) {\n      return (\n        <div>\n            <h1>Voting page</h1>\n            <p id=\"userAddress\">Account : {this.state.accounts[0]}</p>\n          \n            <Card>\n          <Card.Header>\n            Add a proposal\n          </Card.Header>\n          <Card.Body>\n            <Form.Group controlId=\"formDescription\">\n              <Form.Label>\n                Proposal description:\n              </Form.Label>\n              <Form.Control \n                type=\"text\"\n                id=\"_desc\"\n              />\n            </Form.Group>\n            <Button onClick={this.addProposal}>\n              Add\n            </Button>\n          </Card.Body>\n        </Card>\n          \n        <br></br>\n\n        <Card>\n          <Card.Header>\n            Vote\n          </Card.Header>\n          <Card.Body>\n            <Form.Group controlId=\"formId\">\n              <Form.Label>\n                Proposal ID :\n              </Form.Label>\n              <Form.Control\n                type=\"text\"\n                id=\"_id\"\n              />\n            </Form.Group>\n            <Button onClick={this.setVote}>\n              Add\n            </Button>\n          </Card.Body>\n        </Card>\n        \n        <br></br>\n\n        <Card>\n          <Card.Header>\n            Result\n          </Card.Header>\n          <Card.Body id=\"winnerInfo\">\n            <Button onClick={this.getWinner}>\n              Get Winner\n            </Button>\n          </Card.Body>\n        </Card>\n    \n     </div>\n      );\n    }\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}